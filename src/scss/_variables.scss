
// VARIABLES
// -------------------------

/*COLORS*/
// -------------------------

$blue: #4155ff;
$white: #ffffff;
$black: #000000;
$gray7: #333333;
$gray8: #101010;
$gray9: #0c0c0c;
$red: #f44136;
$green: #71b464;
$orange: #da7d3a;
$orange-hover: #d47734;
$primary: #4155ff;
$hover-primary: #3444cc;
$secondary: #ffffff;
$tertiary: #000000;
$quaternary: #101010;
$fifth: #0c0c0c;

$gray0: #f9f9f9;
$gray1: #eeeeee;
$gray2: #C7C7C7;
$gray3: #AFAFAF;
$gray4: #949494;
$gray5: #585858;
$gray6: #404040;
$gray7: #333333;
$gray8: #101010;
$gray9: #0c0c0c;

// Typography variables
// --------------------------------------------------

%font-thin{font-weight: 100;}
%font-extra-light{font-weight: 200;}
%font-light{font-weight: 300;}
%font-regular{font-weight: 400;}
%font-medium{font-weight: 500;}
%font-semi-bold{font-weight: 600;}
%font-bold{font-weight: 700;}
%font-extra-bold{font-weight: 800;}
%font-black{font-weight: 900;}

%roboto-thin{font-weight: 100; font-family: 'Roboto', sans-serif}
%roboto-extra-light{font-weight: 200; font-family: 'Roboto', sans-serif}
%roboto-light{font-weight: 300; font-family: 'Roboto', sans-serif}
%roboto-regular{font-weight: 400; font-family: 'Roboto', sans-serif}
%roboto-medium{font-weight: 500; font-family: 'Roboto', sans-serif}
%roboto-semi-bold{font-weight: 600; font-family: 'Roboto', sans-serif}
%roboto-bold{font-weight: 700; font-family: 'Roboto', sans-serif}
%roboto-extra-bold{font-weight: 800; font-family: 'Roboto', sans-serif}
%roboto-black{font-weight: 900; font-family: 'Roboto', sans-serif}

%propiety-title {font-size: 11px; text-transform: uppercase; @extend %font-light;}
%propiety-subtitle {font-size: 15px; @extend %font-medium;}

/*MIXINS*/
// -------------------------

// Default transition delay
$default-transition--delay: all 0.3s ease-out;

// Mixins shortcuts
@mixin transition-delay($delay) {
  -webkit-transition-delay: $delay;
     -moz-transition-delay: $delay;
      -ms-transition-delay: $delay;
       -o-transition-delay: $delay;
          transition-delay: $delay;
}
@mixin transform($transform) {
  -webkit-transform: $transform;
     -moz-transform: $transform;
      -ms-transform: $transform;
       -o-transform: $transform;
          transform: $transform;
}
@mixin background-size($background-size) {
  -webkit-background-size: $background-size;
     -moz-background-size: $background-size;
      -ms-background-size: $background-size;
       -o-background-size: $background-size;
          background-size: $background-size;
}
// Default transition set by viariable
@mixin transition($transition: $default-transition--delay) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
      -ms-transition: $transition;
       -o-transition: $transition;
          transition: $transition;
}
@mixin border-radius($border-radius) {
  -webkit-border-radius: $border-radius;
     -moz-border-radius: $border-radius;
      -ms-border-radius: $border-radius;
       -o-border-radius: $border-radius;
          border-radius: $border-radius;
}
@mixin transform($transform, $moz: true, $webkit: true, $ms: true, $o: true) {
  @if $webkit { -webkit-transform: $transform; }
  @if $moz    { -moz-transform:    $transform; }
  @if $ms     { -ms-transform:     $transform; }
  @if $o     { -o-transform:     $transform; }
  transform: $transform;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

// Includes
// @include background-size(cover);
// @include transform(translate(-50%, -50%));
// @include transform(rotate(360deg));
// @include transition(all 0.3s ease-out);
// @include border-radius(5px);
// @include box-shadow(0, 2px, 0px, rgba(0, 0, 0, 0.14), false);


// Animations CSS3
@mixin animation($name, $duration, $ease, $delay, $direction, $fill-mode) {
  -webkit-animation: $name $duration $ease $delay $direction $fill-mode;
  -moz-animation: $name $duration $ease $delay $direction $fill-mode;
  -o-animation: $name $duration $ease $delay $direction $fill-mode;
  -ms-animation: $name $duration $ease $delay $direction $fill-mode;
  animation: $name $duration $ease $delay $direction $fill-mode;
}
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} { @content; }
  @-moz-keyframes #{$name} { @content; }
  @-o-keyframes #{$name} { @content; }
  @-ms-keyframes #{$name} { @content; }
  @keyframes #{$name} { @content; }
}

.anm-fadeout{
  @include animation(fadeout, 2s, ease-in-out, 1s, forwards, both);
}
.anm-rotate{
  @include animation(rotate, 6s, ease-in-out, 1s, forwards, both);
}

@include keyframes(fadeout) {
  0% {display: block; opacity: 1;}
  25% {opacity: .75;}
  50% {opacity: .50;}
  75% {opacity: .25;}
  99% {opacity: .01;}
  100% {opacity: 0; width: 0; height: 0;}
}
@include keyframes(rotate) {
  0% {@include transform(rotate(0deg));}
  100% {@include transform(rotate(720deg));}
}


// Extends
%center-top-left{
  position: absolute;
  top: 50%;
  left: 50%;
  @include transform(translate(-50%, -50%));
}
%center-top{
  position: absolute;
  top: 50%;
  @include transform(translate(0%, -50%));
}
%center-left{
  position: absolute;
  left: 50%;
  @include transform(translate(-50%, 0%));
}
%icon {
  transition: background-color ease .2s;
  margin: 0 .5em;
}
.block-icon {
  @extend %icon;
}
.info-icon {
  @extend %icon;
}

// General variables
// --------------------------------------------------
%position-center{position: absolute; top: 50%; left: 50%; @include transform(translate(-50%, -50%));}
%absolute-center{position: absolute; top: 50%; left: 50%; @include transform(translate(-50%, -50%));}
%absolute-center-top{position: absolute; top: 50%; @include transform(translate(0%, -50%));}
%absolute-center-left{position: absolute; left: 50%; @include transform(translate(-50%, 0%));}

%relative-center{position: relative; top: 50%; left: 50%; @include transform(translate(-50%, -50%));}
%relative-center-top{position: relative; top: 50%; @include transform(translate(0%, -50%));}


// Flexbox variables
// --------------------------------------------------
%flex-display{display: flex;}
%flex-container{
  display: flex;
  flex-direction: row; // Defines the direction items are placed in the container
  flex-flow: row; // The two properties flex-direction and flex-wrap are used so often together that the shorthand property flex-flow was created to combine them. This shorthand property accepts the value of one of the two properties separated by a space.
  flex-wrap: wrap; // Items wrap around to additional lines.
  justify-content: space-between; // Aligns items horizontally and accepts the following values:
  align-items: center; // Aligns items vertically and Determines how the items as a whole are aligned within the container
  align-content: flex-end; // Determines the spacing between lines. When there is only one line, align-content has no effect.
}
%flex-item{
  > .flex-item {
    align-self: flex-end; //  This property accepts the same values as align-items and its value for the specific item.
    // align-self: flex-end; order: 1; // Combine order with align-self to help the frogs to their destinations.
  }
}
%flex-item-01{
  &:nth-child(1){ 
    order: 1; // By default, items have a value of 0, but we can use this property to set it to a positive or negative integer value.
  }
}
%flex-item-02{
  &:nth-child(2){ order: 2; }
}
%flex-item-03{
  &:nth-child(3){ order: 3; }
}
