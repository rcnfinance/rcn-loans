version: 2

# List of jobs
jobs:
    # The install job
    install:
        working_directory: ~/project
        docker:
            - image: circleci/node:12.13.0
        steps:
            # Checkout the code from the branch into the working_directory
            - checkout
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
            # Restore local dependencies from cache
            - restore_cache:
                keys:
                - v4-dependencies-{{ checksum "package.json" }}
                - v4-dependencies-
            # Install project dependencies
            - run:
                name: Install local dependencies
                command: npm install
            # Cache local dependencies if they don't exist
            - save_cache:
                key: v4-dependencies-{{ checksum "package.json" }}
                paths:
                    - node_modules

    # The lint job
    lint:
        working_directory: ~/project
        docker:
            - image: circleci/node:12.13.0
        steps:
            # Checkout the code from the branch into the working_directory
            - checkout
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
            # Restore local dependencies from cache
            - restore_cache:
                keys:
                - v4-dependencies-{{ checksum "package.json" }}
                - v4-dependencies-
            # Run lint
            - run:
                name: Lint
                command: npm run lint

    # The build job
    build-mainnet:
        working_directory: ~/project
        docker:
            - image: circleci/node:12.13.0
        steps:
            # Checkout the code from the branch into the working_directory
            - checkout
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
            # Restore local dependencies from cache
            - restore_cache:
                keys:
                - v4-dependencies-{{ checksum "package.json" }}
                - v4-dependencies-
            # Build the project
            - run:
                name: Build
                command: npm run build

            # Load version name
            - run:
                name: Reading version
                command: VERSION="$(cat .version)"

            # Compress build
            - run:
                name: Compressing build
                command: tar -czvf mainnet-build.tar.gz dist

            # Save build
            - store_artifacts:
                path: mainnet-build.tar.gz
    # The build testnet job
    build-ropsten:
        working_directory: ~/project
        docker:
            - image: circleci/node:12.13.0
        steps:
            # Checkout the code from the branch into the working_directory
            - checkout
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
            # Restore local dependencies from cache
            - restore_cache:
                keys:
                - v4-dependencies-{{ checksum "package.json" }}
                - v4-dependencies-

            # Build the project
            - run:
                name: Build
                command: npm run-script build-ropsten

            # Load version name
            - run:
                name: Reading version
                command: VERSION="$(cat .version)"
            # Save uncompressed build
            - persist_to_workspace:
                root: .
                paths:
                    - ./dist/*
            # Compress build
            - run:
                name: Compressing build
                command: tar -czvf ropsten-build.tar.gz dist

            # Save build
            - store_artifacts:
                path: ropsten-build.tar.gz

    e2e-tests:
        working_directory: ~/project
        docker:
            - image: circleci/node:12.13.0-browsers
        steps:
            # Checkout the code from the branch into the working_directory
            - checkout
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
            # Restore local dependencies from cache
            - restore_cache:
                keys:
                - v4-dependencies-{{ checksum "package.json" }}
                - v4-dependencies-
            # Start web server
            - run:
                name: Start server
                command: npm start
                background: true
            - run:
                name: Workaround for GoogleChrome/puppeteer#290
                command: 'sh .circleci/setup_puppeteer.sh'
            - run:
                name: Wait NPM start
                command: until $(curl --output /dev/null --silent --head --fail http://localhost:4200); do printf '.'; sleep 0.1; done;
                timeout: 90
            # Launch jest
            - run:
                name: Jest E2E
                command: ./node_modules/.bin/jest --runInBand
            # Upload images
            - store_artifacts:
                path: screenshots

    unit-tests:
        working_directory: ~/project
        docker:
            - image: circleci/node:12.13.0-browsers
        steps:
            # Checkout the code from the branch into the working_directory
            - checkout
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
            # Restore local dependencies from cache
            - restore_cache:
                keys:
                - v4-dependencies-{{ checksum "package.json" }}
                - v4-dependencies-
            # Stamp version
            - run:
                name: Read version
                command: node version.js
            # Run unit tests
            - run:
                name: Unit tests
                command: ./node_modules/.bin/ng test --code-coverage --watch=false
            # Upload results
            - run:
                name: Upload coverage to coveralls
                command: cat coverage/lcov.info | node_modules/.bin/coveralls
            # Save artifacts
            - store_artifacts:
                path: coverage

workflows:
    version: 2
    # The build workflow
    build:
        jobs:
            - install
            - build-mainnet:
                requires:
                    - install
            - build-ropsten:
                requires:
                    - install
            - lint:
                requires:
                    - install
            - unit-tests:
                requires:
                    - install
